#!/usr/bin/env python
import django
django.setup()

import pprint
from scrapers.trailpeak_route_gpx import ScrapeTrailPeakGPX
from scrapers.summitpost_route_details import ScrapeSummitPostRouteDetails
from scrapers.summitpost_route_gpx import ScrapeSummitPostRouteGPX
from scrapers.trailpeak_route_details import ScrapeTrailPeakDetails
from apps.routes.models.route_metadata import RouteMetadata
from utils.lines import lines_from_gpx_string, geohash, bbox, reduced_lines, max_vertices


def set_lines(rm, lines):
    rm.lines_zoom_1 = reduced_lines(lines, max_vertices(1))
    rm.lines_zoom_2 = reduced_lines(lines, max_vertices(2))
    rm.lines_zoom_3 = reduced_lines(lines, max_vertices(3))
    rm.lines_zoom_4 = reduced_lines(lines, max_vertices(4))
    rm.lines_zoom_5 = reduced_lines(lines, max_vertices(5))
    rm.lines_zoom_6 = reduced_lines(lines, max_vertices(6))
    rm.lines_zoom_7 = reduced_lines(lines, max_vertices(7))
    rm.lines_zoom_8 = reduced_lines(lines, max_vertices(8))
    rm.lines_zoom_9 = reduced_lines(lines, max_vertices(9))
    rm.lines_zoom_10 = reduced_lines(lines, max_vertices(10))
    rm.lines_zoom_11 = reduced_lines(lines, max_vertices(11))
    rm.lines_zoom_12 = reduced_lines(lines, max_vertices(12))
    rm.lines_zoom_13 = reduced_lines(lines, max_vertices(13))
    rm.lines_zoom_14 = reduced_lines(lines, max_vertices(14))
    rm.lines_zoom_15 = reduced_lines(lines, max_vertices(15))
    rm.lines_zoom_16 = reduced_lines(lines, max_vertices(16))
    rm.lines_zoom_17 = reduced_lines(lines, max_vertices(17))
    rm.lines_zoom_18 = reduced_lines(lines, max_vertices(18))
    rm.lines_zoom_19 = reduced_lines(lines, max_vertices(19))
    rm.lines_zoom_20 = reduced_lines(lines, max_vertices(20))


def _massage_lines(rm):
    gpx_scraper = {
        "trailpeak": ScrapeTrailPeakGPX(),
        "summitpost": ScrapeSummitPostRouteGPX(),
    }
    try:
        gpx_content = gpx_scraper[rm.source].get_content(rm.source_gpx_url)
    except:
        return

    lines = lines_from_gpx_string(gpx_content)
    if len(lines) == 0:
        print("skip")
        return

    set_lines(rm, lines)
    rm.save()


def massage(data):
    try:
        name = data.get("name")
        img_url = data.get("trail_image_url")
        src_url = data.get("url")
        rm = RouteMetadata.objects.get(name=name)
        _massage_lines(rm)
        print(rm.pub_id, rm.name)
        # if img_url != "":
        #     print(name, "\t", img_url, "\t", src_url)
    except RouteMetadata.DoesNotExist:
        pass


if __name__ == "__main__":
    sp_scraper = ScrapeSummitPostRouteDetails()
    tp_scraper = ScrapeTrailPeakDetails()
    scrapers = [
      (tp_scraper.json_items(), "trailpeak"),
      (sp_scraper.json_items(), "summitpost"),
    ]

    i = 0
    # total = RouteMetadata.objects.all().count()
    # print(f"processing {total} routes")
    while True:
        scraper, source = scrapers[i % 2]
        data = scraper.__next__()
        massage(data)
        i += 1
