#!/usr/bin/env python
import django
django.setup()
import pprint
from scrapers.trailpeak_route_gpx import ScrapeTrailPeakGPX
from scrapers.summitpost_route_details import ScrapeSummitPostRouteDetails
from scrapers.trailpeak_route_details import ScrapeTrailPeakDetails
from apps.routes.models.route import Route
from utils.lines import lines_from_gpx_string, geohash, bbox, reduced_lines, max_vertices


def get_or_create_route(data, source, i):
    # expected keys
    # "description","directions","name",
    # "mountain_name","subheading",
    # "trail_image_url","url","metadata", "gpx_url",

    if data.get("gpx_url") is None or data.get("gpx_url").endswith("-.gpx"):
        print(f"skip {i}, no gpx_url {data.get('url')}")
        return

    try:
        gpx_content = ScrapeTrailPeakGPX().get_content(data.get("gpx_url"))
    except:
        print(f"skip {i}, bad gpx_url")
        return

    lines = lines_from_gpx_string(gpx_content)
    if len(lines) == 0:
        print(f"skip {i}, no lines")
        return

    try:
        rm = Route.objects.get(
            name=data.get("name"),
        )
        rm.mountain_name = data.get("mountain_name")
        rm.geohash = geohash(bbox(lines))
        rm.bounds = bbox(lines)
        rm.description = data.get("description")
        rm.suggested_gear = data.get("suggested_gear", "")
        rm.source = source
        rm.source_url = data.get("url")
        rm.source_image_url = data.get("trail_image_url")
        rm.source_gpx_url = data.get("gpx_url")
        set_lines(rm, lines)
        rm.save()

        print("have", source, i, len(lines), "\t", lengths(rm), "\t", rm.name)
        return rm

    except Route.DoesNotExist:
        bb = bbox(lines)
        rm = Route.objects.create(
            name=data.get("name"),
            mountain_name=data.get("mountain_name"),
            geohash=geohash(bb),
            bounds=bbox(lines),
            description=data.get("description"),
            suggested_gear=data.get("suggested_gear"),

            source=source,
            source_url=data.get("url"),
            source_image_url=data.get("source_image_url"),
            source_gpx_url=data.get("source_gpx_url"),
        )
        set_lines(rm, lines)
        rm.save()
        print("created", source, i, len(lines[0]), lengths(rm), "\t", rm.name)
        return rm

def lengths(rm):
    return ", ".join([
        str(len(rm.lines_zoom_1[0])),
        str(len(rm.lines_zoom_2[0])),
        str(len(rm.lines_zoom_3[0])),
        str(len(rm.lines_zoom_4[0])),
        str(len(rm.lines_zoom_5[0])),
        str(len(rm.lines_zoom_6[0])),
        str(len(rm.lines_zoom_7[0])),
        str(len(rm.lines_zoom_8[0])),
        str(len(rm.lines_zoom_9[0])),
        str(len(rm.lines_zoom_10[0])),
        str(len(rm.lines_zoom_11[0])),
        str(len(rm.lines_zoom_12[0])),
        str(len(rm.lines_zoom_13[0])),
        str(len(rm.lines_zoom_14[0])),
        str(len(rm.lines_zoom_15[0])),
        str(len(rm.lines_zoom_16[0])),
        str(len(rm.lines_zoom_17[0])),
        str(len(rm.lines_zoom_18[0])),
        str(len(rm.lines_zoom_19[0])),
        str(len(rm.lines_zoom_20[0])),
    ])

def set_lines(rm, lines):
    rm.lines_zoom_1 = reduced_lines(lines, max_vertices(1))
    rm.lines_zoom_2 = reduced_lines(lines, max_vertices(2))
    rm.lines_zoom_3 = reduced_lines(lines, max_vertices(3))
    rm.lines_zoom_4 = reduced_lines(lines, max_vertices(4))
    rm.lines_zoom_5 = reduced_lines(lines, max_vertices(5))
    rm.lines_zoom_6 = reduced_lines(lines, max_vertices(6))
    rm.lines_zoom_7 = reduced_lines(lines, max_vertices(7))
    rm.lines_zoom_8 = reduced_lines(lines, max_vertices(8))
    rm.lines_zoom_9 = reduced_lines(lines, max_vertices(9))
    rm.lines_zoom_10 = reduced_lines(lines, max_vertices(10))
    rm.lines_zoom_11 = reduced_lines(lines, max_vertices(11))
    rm.lines_zoom_12 = reduced_lines(lines, max_vertices(12))
    rm.lines_zoom_13 = reduced_lines(lines, max_vertices(13))
    rm.lines_zoom_14 = reduced_lines(lines, max_vertices(14))
    rm.lines_zoom_15 = reduced_lines(lines, max_vertices(15))
    rm.lines_zoom_16 = reduced_lines(lines, max_vertices(16))
    rm.lines_zoom_17 = reduced_lines(lines, max_vertices(17))
    rm.lines_zoom_18 = reduced_lines(lines, max_vertices(18))
    rm.lines_zoom_19 = reduced_lines(lines, max_vertices(19))
    rm.lines_zoom_20 = reduced_lines(lines, max_vertices(20))


if __name__ == "__main__":
    sp_scraper = ScrapeSummitPostRouteDetails()
    tp_scraper = ScrapeTrailPeakDetails()
    scrapers = [
      (tp_scraper.json_items(), "trailpeak"),
#      (sp_scraper.json_items(), "summitpost"),
    ]

    i = 0
    while True:
        scraper, source = scrapers[0]
        data = scraper.__next__()
        get_or_create_route(data, source, i)
        i += 1
